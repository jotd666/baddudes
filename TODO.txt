
vgmrip: https://vgmrips.net/packs/pack/bad-dudes-vs-dragonninja-data-east

- crash when gray ninja appears (or does something?)

- sommersault frames look inverted
- quantize should be improved: sometimes get less colors than max and should
  definitely consider color weights/frequencies

- double buffering

- implement sprites
  * possible context change on some given X/Y (rounded) scroll values to load/unload sprites (boss fights)
    or just patch the game at 00eca (initialize boss)
  * to save memory, tag the sprites/sprite tiles that can be displayed mirrored, and also specifically the ones
    that can be drawn just once on screen at a time (bosses, maybe possibly main player, dogs... sabreman)
	so we can mirror them dynamically on demand (add specific orientation property at the	cached bitplane level)
	ATM all sprites are mirrored but this isn't viable!!

- check crash .whdl
- still undetected real black on enemies (Karnov...) (almost) OK on Bad dude.
- magenta in game intro sprite sheet...
- reuse color: not working yet, but promising to get even more colors and avoid sprite quantize

- rip a few sounds  
- rip more 244000 tiles (for demo)
- rip 24D000 & 24A000 tiles

- restore buffer uses 3 horizontal playfields, they should use only 2 plus a few tiles
  to restore bobs that "wrap"
  alternative: if bob X + width wrap, clip it and perform 2 restores (but 2x as blits!)
- optim with restore_background or clear_fg_planes...: if blitter if busy,
  use the cpu to process that plane
- hack lamps/trees/fire hydrants (from 244000 layer) with hardware sprites:
  figure out first layer row scroll registers, "trigger" tile to display / undisplay sprite

- "bad dudes" title still small glitches
- "CREDIT" not written when coin inserted
- figure a way to free the last block? OR store block at some point in intro to avoid
  reloading 244000 tiles OR keep 244000 tiles loaded at all times
  (and share palette with 24D000 layer too!)

- osd_write_byte not working properly
- maybe blit 16x16 tiles at some point instead of using CPU



reverse lb_024dc
reverse jump tables (like in pooyan): get dc.l  lb_xxxxx and set breakpoints
    ADDA.L    D2,A3            ;025b4: d7c2
    MOVEA.L    (A3),A3            ;025b6: 2653
    JSR    (A3)            ;025b8: 4e93
